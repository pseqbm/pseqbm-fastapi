#for formatting use tab
name: Build and Deploy Code # name of our workflow

#when should our CI/CD pipeline should run #either push or pull request or both
#on: push
#on: pull_request

#every push on every single branch and every pull on every single branch 
on: [push, pull_request] 
#on:
#  push: 
#    branches: #["main", "another_branch", "feature_branch"] #all of the branches we should run before do push
#      - "main"
#      - "anotherbranch"
#  pull_request:
#    branches:
#      - "test_branch"

#https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python
#https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows

#create a job
#A job is a set of steps in a workflow that execute on the same runner. 
#Each step is either a shell script that will be executed, or an action that will be run. 
#Steps are executed in order and are dependent on each other. 
#Since each step is executed on the same runner, you can share data from one step to another. 
#For example, you can have a step that builds your application followed by a step that tests the application that was built.
#our runner is a VM
#https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions
#job is a list of steps


#to make env var global
#env:
#  DATABASE_HOSTNAME=localhost

jobs:
 #what type of machine we want run #github CI/CD tool will provide us a machine/tool 
 #we need to specify what operating system do we want to run it on  # we can run it on linux, windows, mac -> to test all three of them 
 #since our production env runs on linux machine it makes sense to do all of the testing on the linux machine
 #https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onpushpull_requestpull_request_targetpathspaths-ignore
 #https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners
  build:
    #job specific env variable
    environment: #https://github.com/pseqbm/pseqbm-fastapi/settings/environments/403879418/edit
      name: testing
    env:
      DATABASE_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}}
      DATABASE_PORT: ${{secrets.DATABASE_PORT}}
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
      DATABASE_NAME: ${{secrets.DATABASE_NAME}}
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      ALGORITHM: ${{secrets.ALGORITHM}}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{secrets.ACCESS_TOKEN_EXPIRE_MINUTES}}
    
    #creating db service container with docker hub
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
          #custom database name
          POSTGRES_DB: ${{secrets.DATABASE_NAME}}_test #string interpolation
        ports:
          - 5432:5432 #it does not work with env var
        # Set health checks to wait until postgres has started #before any pytest runs postgresql has to load the db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    runs-on: ubuntu-latest
    #list of steps
    steps:
    #give specific command we want to run as well as name # human readable name
    #command that needs to run on our machine to pull repo # use pre built actions # type checkout in https://github.com/marketplace?type=
    #https://github.com/marketplace/actions/checkout
    #we can specify repo that we want to pull, however github already knows what repo we are working on # since we did git push
      - name: pulling git repo
        uses: actions/checkout@v2 # command from market place
      #after we pull our github repo we want to set up python 
      #https://github.com/marketplace/actions/setup-python #matrices of python versions or operating systems are crucial
      - name: Install python version 3.9
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"
      - name: update pip
        run: python -m pip install --upgrade pip #command on linux shell #since we are pulling all code with actions/checkout@v2 we have access to requirements.txt
      - name: dependencies
        run: pip install -r requirements.txt
      #- name: say hi to pseqbm
      #  run: echo "hello pseqbm" #it will echo our string # sudo apt install # command on the machine any linux command since we have access to cli
      #push these changes to git repo
      
      #after code is pushed the github action takes place and the workflow runs # when done successfully job will be marked as green
      #we can generate workflow for specific branch

      #run pytest
      - name: test with pytest
      #to run multiple commands we use pipe char |
        run: |
          pip install pytest
          pytest
      
      # #login into our docker hub
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v1
      #   with:
      #     username: ${{secrets.DOCKER_HUB_USERNAME}}
      #     password: ${{secrets.DOCKER_HUB_ACCESS_TOKEN}}
      
      # #setup Docker Buildx to create the builder instance using a BuildKit container under the hood
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v1
      
      # - name: Build and push
      #   id: docker_build
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: ./ #current directory of the project
      #     file: ./Dockerfile #location of our Dockerfile
      #     builder: ${{ steps.buildx.outputs.name }}
      #     push: true #push to docker hub 
      #     tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fastapi:latest ## username/reponame:tagname we need specific tag 
      #     #Optimizing the workflow with cache
      #     cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/fastapi:buildcache
      #     cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/fastapi:buildcache,mode=max
      # - name: Image digest
      #   run: echo ${{ steps.docker_build.outputs.digest }}

  #this env var will be isolated from the above ones and vice versa
  #set a db on a runner itself or use a pointer to a brand new computer

  #db can be hosted on heroku, AWS etc.
  #do not hardcode values #store them as a secret #runner has access but others
  #https://github.com/pseqbm/pseqbm-fastapi/settings/secrets/actions -> global secrets
  
  #or set up as env for testing, development, production
  #https://github.com/pseqbm/pseqbm-fastapi/settings/environments/403879418/edit
  
  #set up db on our runner so we can run the test
  #https://docs.github.com/en/github-ae@latest/actions/using-containerized-services/creating-postgresql-service-containers
  #github actions will allows us to spin up docker container with postgresql

  #postgresql need to be up and ready before we start any tests

#CI pipeline
#pull code
#install python
#dependencies
#run tests
#docker is the last stage for CI portion of CI/DI pipeline

#SETUP CD -> PUSH OUT NEW CODE TO OUR PRODUCTION NETWORK
#SET UP ANOTHER JOB #BY DEFAULT JOBS ON GITHUB RUN IN Parallel
#from github actions marketplace
#pull our github repo
#install heroku cli
#heroku login
#add git remote for heroku
#git push heroku main

#OR REPLACE IT WITH COMMAND FROM A GITHUB ACTIONS MARKETPLACE
#DEPLOY TO HEROKU
#https://github.com/marketplace/actions/deploy-to-heroku
#https://dashboard.heroku.com/account -> api key -> reveal
#on github page create env production and add HEROKU_API_KEY, HEROKU_EMAIL, HEROKU_APP
  deploy:
    runs-on: ubuntu-latest
    needs: [build] #list of jobs before deploy job can run
    environment:
      name: production
    steps:
    # pull repo and deploy to heroku
      - name: pulling git repo
        uses: actions/checkout@v2 # command from market place
      - name: deploying to heroku
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: ${{secrets.HEROKU_APP}} #Must be unique in Heroku
          heroku_email: ${{secrets.HEROKU_EMAIL}}
    #instead of preconfigured github action -> we can also do manual approach:
    #https://remarkablemark.org/blog/2021/03/12/github-actions-deploy-to-heroku/
      
    #DEPLOY OUR UPDATES TO UBUNTU SERVER
    #WHAT EXACTLY ARE THE COMMANDS TO RUN TO UPDATE PROD ENV
    #login to our ubuntu // ssh to it
    #cd / app/src
    #git pull
    #systemctl restart api
    #https://github.com/marketplace/actions/ssh-remote-commands
    #port should default to port 22 that runs on our ubuntu server
      - name: deploy to ubuntu server
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.PROD_HOST}}
          username: ${{secrets.PROD_USERNAME}}
          password: ${{secrets.PROD_PASSWORD}}
          #port: ${{secrets.PORT}}
          script: |
            cd app/src
            git pull
            sudo systemctl restart api


    #behind the scenes the build-deploy file works as:
    #if any mistakes made during the build job -> it won't execute any deploy job
